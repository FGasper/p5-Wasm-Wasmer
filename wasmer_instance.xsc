#ifndef P5_WASM_WASMER_INSTANCE
#define P5_WASM_WASMER_INSTANCE 1

#include "p5_wasm_wasmer.h"

#include "wasmer_module.xsc"

#include "wasmer_callback.xsc"

#define P5_WASM_WASMER_INSTANCE_CLASS "Wasm::Wasmer::Instance"

typedef struct {
    wasm_instance_t* instance;
    SV* module_sv;

    pid_t pid;

    wasm_extern_vec_t exports;
} instance_holder_t;

/* ---------------------------------------------------------------------- */

CV* _get_import_coderef( pTHX_ AV* imports_av, const wasm_name_t* modname, const wasm_name_t* funcname ) {
    for (SSize_t i=0; i<=av_top_index(imports_av); i++) {
        SV** val = av_fetch(imports_av, i, 0);

        if (val == NULL) {
            croak("NULL found where ARRAY ref expected??");
        }

        if (!SvOK(*val)) {
            croak("Uninitialized value found where ARRAY ref expected??");
        }

        AV* import_av = get_av_from_sv_or_croak( aTHX_ *val, "Import" );

        SV** el0 = av_fetch(import_av, 0, 0);

        SV **el1, **el2, **el3;

        if (el0 == NULL) {
            croak("NULL found at start of import??");
        }

        switch (SvUV(*el0)) {
            case WASM_EXTERN_FUNC: {
fprintf(stderr, "got a func import\n");
                    if (av_top_index(import_av) != 3) {
                        croak("Function imports should have exactly 3 arguments, not %ld", 1 + av_top_index(import_av));
                    }

                    el1 = av_fetch(import_av, 1, 0);

                    STRLEN perl_modname_len;
                    const char* perl_modname = SvPVbyte(*el1, perl_modname_len);

                    if (perl_modname_len != modname->size) break;
                    if (!memEQ(perl_modname, modname->data, modname->size)) break;
fprintf(stderr, "module name matches\n");

                    el2 = av_fetch(import_av, 2, 0);

                    STRLEN perl_funcname_len;
                    const char* perl_funcname = SvPVbyte(*el2, perl_funcname_len);

                    if (perl_funcname_len != funcname->size) break;
                    if (!memEQ(perl_funcname, funcname->data, funcname->size)) break;
fprintf(stderr, "func name matches\n");

                    el3 = av_fetch(import_av, 3, 0);
fprintf(stderr, "fetch 3\n");
                    if (!SvROK(*el3) || SVt_PVCV != SvTYPE(SvRV(*el3))) {
                        croak("Last arg to function import must be a coderef, not %" SVf, el3);
                    }

                    return (CV*) SvRV(*el3);
                }

                break;

            default:
                break;
        }
    }

    return NULL;
}

SV* create_instance_sv (pTHX_ SV* class_sv, SV* module_sv, SV* imports_sv) {
    const char* class = class_sv ? SvPVbyte_nolen(class_sv) : P5_WASM_WASMER_INSTANCE_CLASS;

    AV* imports_av = NULL;

    if (imports_sv) {
        if (SvOK(imports_sv)) {
            imports_av = get_av_from_sv_or_croak( aTHX_ imports_sv, "Imports" );
        }
    }

    module_holder_t* module_holder_p = svrv_to_ptr(aTHX_ module_sv);

    wasm_importtype_vec_t import_types;
    wasm_module_imports(module_holder_p->module, &import_types);

    SV* store_sv = module_holder_p->store_sv;
    store_holder_t* store_holder_p = svrv_to_ptr(aTHX_ store_sv);

    wasm_extern_t* externs[import_types.size];

    for (size_t i = 0; i < import_types.size; ++i) {
        const wasm_name_t* modname = wasm_importtype_module(import_types.data[i]);
        const wasm_name_t* name = wasm_importtype_name(import_types.data[i]);

        if (_DEBUG) {
            fprintf(stderr, "Import %zu: %.*s/%.*s\n", i, (int)modname->size, modname->data, (int)name->size, name->data);
        }

        const wasm_externtype_t* externtype = wasm_importtype_type(import_types.data[i]);

        switch (wasm_externtype_kind(externtype)) {
            case WASM_EXTERN_FUNC: {
                CV* coderef = _get_import_coderef(aTHX_ imports_av, modname, name);

                const wasm_functype_t* functype = wasm_externtype_as_functype_const(externtype);
                const wasm_valtype_vec_t* params = wasm_functype_params(functype);
                const wasm_valtype_vec_t* results = wasm_functype_results(functype);

                callback_holder_t* callback_holder_p;

                Newx(callback_holder_p, 1, callback_holder_t);

                callback_holder_p->store = store_holder_p->store;
#if WASM_WASMER_MUST_STORE_PERL
                callback_holder_p->aTHX = aTHX;
#endif
                callback_holder_p->coderef = coderef;
                SvREFCNT_inc( (SV*) coderef );
                callback_holder_p->modname = *modname;
                callback_holder_p->funcname = *name;

                wasm_valtype_vec_copy(
                    &callback_holder_p->results,
                    results
                );

                own wasm_functype_t* host_func_type = wasm_functype_new((wasm_valtype_vec_t *) params, (wasm_valtype_vec_t *) results);

                own wasm_func_t* host_func = wasm_func_new_with_env(
                    store_holder_p->store,
                    host_func_type,
                    host_func_callback,
                    callback_holder_p,
                    free_callback_holder
                );
fprintf(stderr, "made func\n");

                wasm_functype_delete(host_func_type);

                externs[i] = wasm_func_as_extern(host_func);
            } break;

            default:
                croak("Unhandled import type: %d\n", wasm_externtype_kind(externtype));
                break;
        }
    }

    own wasm_extern_vec_t imports = WASM_ARRAY_VEC(externs);
    wasm_trap_t* traps = NULL;

    own wasm_instance_t* instance = wasm_instance_new(
        NULL, /* Ignored, per the documentation */
        module_holder_p->module,
        &imports,
        &traps
    );

    for (unsigned i=0; i<import_types.size; i++) {
        wasm_func_t* func = wasm_extern_as_func(externs[i]);
        wasm_func_delete(func);
    }

    // TODO: cleaner
    assert(instance);

    instance_holder_t* instance_holder_p;

    Newx(instance_holder_p, 1, instance_holder_t);

    instance_holder_p->instance = instance;
    instance_holder_p->pid = getpid();
    instance_holder_p->module_sv = module_sv;

    wasm_instance_exports(instance, &instance_holder_p->exports);

    SvREFCNT_inc(module_sv);

    return ptr_to_svrv(aTHX_ instance_holder_p, gv_stashpv(class, FALSE));
}

void destroy_instance_sv (pTHX_ SV* self_sv) {
    instance_holder_t* instance_holder_p = svrv_to_ptr(aTHX_ self_sv);

    warn_destruct_if_needed(self_sv, instance_holder_p->pid);

    wasm_instance_delete(instance_holder_p->instance);
    wasm_extern_vec_delete(&instance_holder_p->exports);

    SvREFCNT_dec(instance_holder_p->module_sv);

    Safefree(instance_holder_p);
}

#endif
